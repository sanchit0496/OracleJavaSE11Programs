//the variables can be user of super and values can be changed bro

class A{ 
    int a; //private, a has private access in A
    int b;
    void showA(){ 
        System.out.println(a + " " + b);
    }
}

class B extends A{ 
    int c;
    void showB(){ 
        System.out.println(c);
    }
    void sum(){ 
        System.out.println("sum " + (a+b+c));
    }
} 

public class Main
{
	public static void main(String[] args) {
		A superA = new A();
		B smallB = new B();
		superA.a = 10;
		superA.b = 20;
		
		smallB.a = 40;
		smallB.b = 20;
		smallB.c = 40;
		superA.showA();
		smallB.showB();
		smallB.sum();
		
	}
}










class Box
{
  double width;
  double height;
  double depth;

// construct clone of an object
    Box (Box ob)
  {				// pass object to constructor
    width = ob.width;
    height = ob.height;
    depth = ob.depth;
  }
// constructor used when all dimensions specified
  Box (double w, double h, double d)
  {
    width = w;
    height = h;
    depth = d;
  }
// constructor used when no dimensions specified
  Box ()
  {
    width = -1;			// use -1 to indicate
    height = -1;		// an uninitialized
    depth = -1;			// box
  }
// constructor used when cube is created
  Box (double len)
  {
    width = height = depth = len;
  }
// compute and return volume
  double volume ()
  {
    return width * height * depth;
  }
}

// Here, Box is extended to include weight.
class BoxWeight extends Box
{
  double weight;		// weight of box
// constructor for BoxWeight
    BoxWeight (double w, double h, double d, double m)
  {
    width = w;
    height = h;
    depth = d;
    weight = m;
  }
}


class Main
{
  public static void main (String args[])
  {
    BoxWeight mybox1 = new BoxWeight (10, 20, 15, 34.3);
    BoxWeight mybox2 = new BoxWeight (2, 3, 4, 0.076);
    double vol;
      vol = mybox1.volume ();
      System.out.println ("Volume of mybox1 is " + vol);
      System.out.println ("Weight of mybox1 is " + mybox1.weight);
      System.out.println ();
      vol = mybox2.volume ();
      System.out.println ("Volume of mybox2 is " + vol);
      System.out.println ("Weight of mybox2 is " + mybox2.weight);
  }
}










//inheritance
class Calculation{ 
    int m;
    public void addition(int a, int b){ 
        m = a + b;
        System.out.println("addition " + m);
    }
    public void multiplication(int a, int b){ 
        m = a * b;
        System.out.println("multiplication " + m );
    }
}

class advanceCalculation extends Calculation{ 
    int z;
    public void fourtimes(int a){ 
        z = a*a*a*a;
        System.out.println("four " + z);
    }
}
  
public class Main{ 
    public static void main(String[] args){ 
        advanceCalculation calc = new advanceCalculation();
        calc.addition(20,20);
        calc.multiplication(20,20);
        calc.fourtimes(20);
    }
}



//instanceof
class Animal{ 
    
}
class water extends Animal{ 
    
}
class reptile extends water{ 
    
}


class Main extends Animal{ 
    public static void main(String[] args){
        Animal a = new Animal();
        water w = new water();
        reptile r = new reptile();
        Main m = new Main();
        
        System.out.println(w instanceof Animal); //true
        System.out.println(r instanceof Animal); ///true
        System.out.println(m instanceof Animal); //true
        System.out.println(r instanceof water); //true

    }
}




//inherits and extends keyword
interface Animal{ 
    
}
class Mammal implements Animal{ 
    
}
class Reptile extends Mammal{ 
    
}
class groundreptile extends Reptile{ 
    
}
class Main extends Mammal{  
    public static void main(String[] args){  
        Mammal m = new Mammal();
        Reptile r = new Reptile();
        groundreptile gr = new groundreptile();
        Main n = new Main();
        
        System.out.println(m instanceof Animal);
        System.out.println(n instanceof Animal);
        System.out.println(r instanceof Mammal);
        System.out.println(gr instanceof Reptile);
        System.out.println(gr instanceof Animal);
        System.out.println(gr instanceof Mammal);
    }
}











