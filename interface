interface Animal{ 
    public void eat();
    public void travel();
}


public class Main implements Animal{
    
    public void eat(){ 
        System.out.println("The Food");
    }
    public void travel(){  
        System.out.println("The Travel");
    }
    public int totalLegs(){ 
        return 0;  
    }
    
    public static void main(String[] args){
        Main m = new Main();
        m.eat();
        m.travel();
        
    }  
    
}  

import java.io.*;

interface player{  
    final int a = 10;
    void display();
}

class Main implements player{  
    public void display(){ 
        System.out.println("Geek");
    }  
    public static void main(String[] args){ 
        Main m = new Main();
        m.display();
        System.out.println(a);
    }
    
    
}











import java.io.*; 
  
interface Vehicle { 
      
    // all are the abstract methods. 
    void changeGear(int a); 
    void speedUp(int a); 
    void applyBrakes(int a); 
} 
  
class Bicycle implements Vehicle{ 
      
    int speed; 
    int gear; 
      
     // to change gear 
    @Override
    public void changeGear(int newGear){ 
          
        gear = newGear; 
    } 
      
    // to increase speed 
    @Override
    public void speedUp(int increment){ 
          
        speed = speed + increment; 
    } 
      
    // to decrease speed 
    @Override
    public void applyBrakes(int decrement){ 
          
        speed = speed - decrement; 
    } 
      
    public void printStates() { 
         System.out.println("speed: " + speed 
              + " gear: " + gear); 
    } 
} 
  
class Bike implements Vehicle { 
      
    int speed; 
    int gear; 
      
    // to change gear 
    @Override
    public void changeGear(int newGear){ 
          
        gear = newGear; 
    } 
      
    // to increase speed 
    @Override
    public void speedUp(int increment){ 
          
        speed = speed + increment; 
    } 
      
    // to decrease speed 
    @Override
    public void applyBrakes(int decrement){ 
          
        speed = speed - decrement; 
    } 
      
    public void printStates() { 
         System.out.println("speed: " + speed 
             + " gear: " + gear); 
    } 
      
} 
class Main { 
      
    public static void main (String[] args) { 
      
        // creating an inatance of Bicycle  
        // doing some operations  
        Bicycle bicycle = new Bicycle(); 
        bicycle.changeGear(2); 
        bicycle.speedUp(3); 
        bicycle.applyBrakes(1); 
          
        System.out.println("Bicycle present state :"); 
        bicycle.printStates(); 
          
        // creating instance of the bike. 
        Bike bike = new Bike(); 
        bike.changeGear(1); 
        bike.speedUp(4); 
        bike.applyBrakes(3); 
          
        System.out.println("Bike present state :"); 
        bike.printStates(); 
    } 
}




//Prior to JDK 8, interface could not define implementation. We can now add default 
//implementation for interface methods. This default implementation has special use 
//and 
//does not affect the intention behind interfaces
interface in1{ 
    final int a = 10;
    default void display(){ 
        System.out.println("hello");
    }
}

class Main implements in1{  
    public static void main(String[] args){  
        Main m = new Main();
        m.display();
    }
}













//Another feature that was added in JDK 8 is that we can now define static methods in interfaces which can be called independently 
//without an object. Note: these methods are not inherited
interface in1{
    final int a = 10;
    static void display(){ 
        System.out.println("hello");
    }
}  

class Main implements in1{  
    public static void main(String[] args){  
        in1.display();
    }   
}
